package hashvalidator

import (
	"errors"
	"io"
	"net/http"
)

func (h *hashValidator) TransformWriter(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		cw := w
		if h.secret != "" {
			rd := &responseData{
				status: 0,
			}
			cw = &hashResponseWriter{
				ResponseWriter: w,
				responseData:   rd,
			}

			// encoder, _ := g.getWriter(r.Header, w)
			// if encoder != nil {
			// 	cw.w = encoder
			// }

			// //defer cleanup()
			// defer cw.Close()
		}

		next.ServeHTTP(cw, r)
	})
}

type responseData struct {
	status int
	data   []byte
}

type hashResponseWriter struct {
	wroteHeader bool
	http.ResponseWriter
	responseData *responseData
}

// func (g *hashValidator) getWriter(h http.Header, w io.Writer) (io.Writer, error) {
// 	header := h.Get("Accept-Encoding")

// 	accepted := strings.Split(strings.ToLower(header), ",")

// 	for _, v := range accepted {
// 		if v == "gzip" {
// 			wr, err := gzip.NewWriterLevel(w, g.level)
// 			if err != nil {
// 				return nil, err
// 			}
// 			return wr, nil
// 		}
// 	}

// 	return nil, nil
// }

// func (cw *hashWriter) isSignable() bool {
// 	contentType := cw.Header().Get("Content-Type")
// 	if idx := strings.Index(contentType, ";"); idx >= 0 {
// 		contentType = contentType[0:idx]
// 	}

// 	if _, ok := cw.contentTypes[contentType]; ok {
// 		return true
// 	}

// 	return false
// }

func (r *hashResponseWriter) Write(b []byte) (int, error) {
	size, err := r.ResponseWriter.Write(b)
	r.responseData.data = append(r.responseData.data, b...)
	return size, err
}

// func (r *hashResponseWriter) WriteHeader(statusCode int) {
// 	r.ResponseWriter.WriteHeader(statusCode)
// 	r.responseData.status = statusCode
// }

func (cw *hashResponseWriter) WriteHeader(code int) {
	if cw.wroteHeader {
		cw.ResponseWriter.WriteHeader(code)
		return
	}
	cw.wroteHeader = true
	defer cw.ResponseWriter.WriteHeader(code)

	cw.Header().Set("Content-Encoding", "gzip")
	cw.Header().Set("Vary", "Accept-Encoding")
	cw.Header().Del("Content-Length")
}

func (cw *hashResponseWriter) Write(p []byte) (int, error) {

}

func (cw *hashWriter) Close() error {
	if c, ok := cw.writer().(io.WriteCloser); ok {
		return c.Close()
	}
	return errors.New("chi/middleware: io.WriteCloser is unavailable on the writer")
}

func (cw *hashWriter) writer() io.Writer {
	if cw.signable {
		return cw.w
	} else {
		return cw.ResponseWriter
	}
}
