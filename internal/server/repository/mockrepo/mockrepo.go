// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/benderr/metrics/internal/server/repository (interfaces: MetricRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/server/repository/mockrepo/mockrepo.go -package=mockrepo github.com/benderr/metrics/internal/server/repository MetricRepository
//
// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	repository "github.com/benderr/metrics/internal/server/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricRepository is a mock of MetricRepository interface.
type MockMetricRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRepositoryMockRecorder
}

// MockMetricRepositoryMockRecorder is the mock recorder for MockMetricRepository.
type MockMetricRepositoryMockRecorder struct {
	mock *MockMetricRepository
}

// NewMockMetricRepository creates a new mock instance.
func NewMockMetricRepository(ctrl *gomock.Controller) *MockMetricRepository {
	mock := &MockMetricRepository{ctrl: ctrl}
	mock.recorder = &MockMetricRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRepository) EXPECT() *MockMetricRepositoryMockRecorder {
	return m.recorder
}

// BulkUpdate mocks base method.
func (m *MockMetricRepository) BulkUpdate(arg0 context.Context, arg1 []repository.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdate indicates an expected call of BulkUpdate.
func (mr *MockMetricRepositoryMockRecorder) BulkUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockMetricRepository)(nil).BulkUpdate), arg0, arg1)
}

// Get mocks base method.
func (m *MockMetricRepository) Get(arg0 context.Context, arg1 string) (*repository.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*repository.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricRepository)(nil).Get), arg0, arg1)
}

// GetList mocks base method.
func (m *MockMetricRepository) GetList(arg0 context.Context) ([]repository.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0)
	ret0, _ := ret[0].([]repository.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockMetricRepositoryMockRecorder) GetList(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockMetricRepository)(nil).GetList), arg0)
}

// PingContext mocks base method.
func (m *MockMetricRepository) PingContext(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockMetricRepositoryMockRecorder) PingContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockMetricRepository)(nil).PingContext), arg0)
}

// Update mocks base method.
func (m *MockMetricRepository) Update(arg0 context.Context, arg1 repository.Metrics) (*repository.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*repository.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricRepository)(nil).Update), arg0, arg1)
}
