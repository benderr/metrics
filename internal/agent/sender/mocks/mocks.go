// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/benderr/metrics/internal/agent/sender (interfaces: MetricSender)
//
// Generated by this command:
//
//	mockgen -destination=internal/agent/sender/mocks/mocks.go -package=mocksender github.com/benderr/metrics/internal/agent/sender MetricSender
//
// Package mocksender is a generated GoMock package.
package mocksender

import (
	context "context"
	reflect "reflect"

	report "github.com/benderr/metrics/internal/agent/report"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricSender is a mock of MetricSender interface.
type MockMetricSender struct {
	ctrl     *gomock.Controller
	recorder *MockMetricSenderMockRecorder
}

// MockMetricSenderMockRecorder is the mock recorder for MockMetricSender.
type MockMetricSenderMockRecorder struct {
	mock *MockMetricSender
}

// NewMockMetricSender creates a new mock instance.
func NewMockMetricSender(ctrl *gomock.Controller) *MockMetricSender {
	mock := &MockMetricSender{ctrl: ctrl}
	mock.recorder = &MockMetricSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricSender) EXPECT() *MockMetricSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMetricSender) Send(arg0 context.Context, arg1 []report.MetricItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMetricSenderMockRecorder) Send(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMetricSender)(nil).Send), arg0, arg1)
}
